parameters:
  vmImage:

jobs:
- job: 'DeployWork'

  pool:
   vmImage: ${{ parameters.vmImage }}

  steps:
    - checkout: self
      displayName: 'Checkout sources'
      persistCredentials: true

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: current
        downloadType: single
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $dropDirectory = Join-Path -Path $env:SYSTEM_ARTIFACTSDIRECTORY -ChildPath 'drop'
          New-Item -ItemType Directory -Path (Join-Path -Path $env:SYSTEM_ARTIFACTSDIRECTORY -ChildPath 'git')
          Set-Location -Path (Join-Path -Path $env:SYSTEM_ARTIFACTSDIRECTORY -ChildPath 'git')
          git clone -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" $env:BUILD_REPOSITORY_URI
          Get-Childitem -Path (Join-Path -Path $env:SYSTEM_ARTIFACTSDIRECTORY -ChildPath 'git')
        pwsh: true
      displayName: 'Clone Azure Pipelines repo'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $dropDirectory = Join-Path -Path $env:SYSTEM_ARTIFACTSDIRECTORY -ChildPath 'drop'
          $docsDir = Join-Path $dropDirectory -ChildPath 'docs'
          $cloneDir = [System.IO.Path]::Combine($env:SYSTEM_ARTIFACTSDIRECTORY, 'git', $env:BUILD_REPOSITORY_NAME)
          $docsclonedir = Join-Path -Path $cloneDir -ChildPath 'docs'
          Set-Location -Path $cloneDir
          git checkout $(Build.SourceBranchName)
          Copy-Item -Path $docsDir -Destination $cloneDir -Force -Recurse
          git add .
          git config --global user.email "you@example.com"
          git config --global user.name "Constantin Hager"
          git commit -m "***NO_CI*** added markdown help"
          git push
        pwsh: true
      displayName: 'Copy Markdown Help into git Folder'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $dropDirectory = Join-Path -Path $env:SYSTEM_ARTIFACTSDIRECTORY -ChildPath 'drop'
          $ModuleName = $env:BUILD_REPOSITORY_NAME
          $ModuleNameFull = Join-Path $dropDirectory -ChildPath $ModuleName
          Import-Module -Name $ModuleNameFull -Verbose
          Publish-Module -Path "$ModuleNameFull" -NuGetApiKey $env:PS_GALLERY_SECRET -Verbose
        pwsh: true
      env:
        PS_GALLERY_SECRET: $(PSGallery)
      displayName: 'Publish To PowerShell Gallery'